/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Image, Audio } from "@boundaryml/baml"

/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}


export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface CodeQuality {
  strengths: string[]
  concerns: string[]
  metrics: CodeQualityMetrics
  
}

export interface CodeQualityMetrics {
  testCoverage: string
  complexity: string
  maintainability: string
  
}

export interface ComprehensiveAnalysis {
  summary: Summary
  impact: TechnicalImpact
  team: TeamProgress
  references: References
  
}

export interface ContributorStats {
  commitCount: number
  filesChanged: number
  insertions: number
  deletions: number
  
}

export interface Feature {
  name: string
  status: "completed" | "in-progress" | "planned"
  changes: string[]
  impact: ImpactAssessment
  
}

export interface FileChange {
  path: string
  content: string
  insertions: number
  deletions: number
  changeType: "added" | "modified" | "deleted"
  language: string
  
}

export interface FileSummary {
  summary: string
  changes: string[]
  technicalNotes: string[]
  impact: ImpactAssessment
  technicalDebt: TechnicalDebt[]
  knowledgeInsights: KnowledgeInsight[]
  links: Link[]
  
}

export interface ImpactAssessment {
  level: "low" | "medium" | "high"
  scope: "local" | "module" | "system-wide"
  affectedComponents: string[]
  risks: string[]
  mitigations: string[]
  
}

export interface KnowledgeInsight {
  type: "documentation" | "best-practices" | "patterns" | "learnings" | "dependencies"
  description: string
  actionItems: string[]
  
}

export interface Link {
  type: "pr" | "issue" | "doc" | "external"
  url: string
  title: string
  context: string
  
}

export interface References {
  prs: Link[]
  issues: Link[]
  docs: Link[]
  
}

export interface Summary {
  title: string
  description: string
  highlights: string[]
  
}

export interface TeamContribution {
  author: string
  stats: ContributorStats
  impactLevel: "low" | "medium" | "high"
  
}

export interface TeamProgress {
  contributors: TeamContribution[]
  collaboration: KnowledgeInsight[]
  
}

export interface TechnicalDebt {
  description: string
  severity: "low" | "medium" | "high"
  type: "code-quality" | "testing" | "documentation" | "security" | "performance" | "maintainability"
  suggestedFix: string
  
}

export interface TechnicalImpact {
  features: Feature[]
  technicalDebt: TechnicalDebt[]
  codeQuality: CodeQuality
  
}
