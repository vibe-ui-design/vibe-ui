/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio } from "@boundaryml/baml"
import { toBamlError, HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type * as types from "./types"
import type {CodeQuality, CodeQualityMetrics, ComprehensiveAnalysis, ContributorStats, Feature, FileChange, FileSummary, ImpactAssessment, KnowledgeInsight, Link, References, Summary, TeamContribution, TeamProgress, TechnicalDebt, TechnicalImpact} from "./types"
import type TypeBuilder from "./type_builder"

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
}

export class AsyncHttpRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async CombineFileSummaries(
      summaries: FileSummary[],commitSummary: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      return await this.runtime.buildRequest(
        "CombineFileSummaries",
        {
          "summaries": summaries,"commitSummary": commitSummary
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async SummarizeFileChange(
      file: FileChange,context?: string | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      return await this.runtime.buildRequest(
        "SummarizeFileChange",
        {
          "file": file,"context": context?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class AsyncHttpStreamRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async CombineFileSummaries(
      summaries: FileSummary[],commitSummary: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      return await this.runtime.buildRequest(
        "CombineFileSummaries",
        {
          "summaries": summaries,"commitSummary": commitSummary
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async SummarizeFileChange(
      file: FileChange,context?: string | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      return await this.runtime.buildRequest(
        "SummarizeFileChange",
        {
          "file": file,"context": context?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}