---
description: 
globs: *.rs,Cargo.toml,*.yaml,*.json
---
# Rust Home Automation Platform Development Rules

## Development Philosophy
- Build modular, extensible code with clear abstractions.
- Leverage Rustâ€™s safety, concurrency, and type system to build robust embedded systems.
- Prioritize a design that supports dynamic device discovery alongside persistent configuration.
- Document decisions, alternatives, and learning points throughout development.
- Encourage community contributions by exposing well-defined interfaces and configuration schemas.
- Strive for maintainability, testability, and future extensibility.

## Project Overview
We are developing a home automation core engine in Rust that runs on a Raspberry Pi. The system will:
- **Dynamically discover devices** (using protocols like mDNS) and update an in-memory device registry.
- **Load persistent configuration** from YAML files (using Serde) to apply user-defined settings.
- **Expose an API** (e.g., REST or WebSocket) so that a web-based UI and mobile app can control and configure devices.
- Be designed with extensibility in mind, allowing community contributors to add support for additional IoT devices.

## Core Requirements
1. **Dynamic Discovery Module:**  
   - Listen for new devices on the network (e.g., via mDNS) and automatically update the device registry.
2. **Device Abstraction:**  
   - Define a generic `IoTDevice` trait with asynchronous methods such as `connect()`, `send_command()`, and `get_state()`.
   - Provide at least one sample implementation (e.g., a dummy light device).
3. **In-Memory Device Registry:**  
   - Maintain a registry (e.g., a `HashMap` protected by a Tokio `RwLock`) that can be updated concurrently.
4. **YAML Configuration Integration:**  
   - Load configuration from YAML files to apply persistent settings (like device names, room assignments) and merge these with runtime discovery data.
5. **API Exposure:**  
   - Stub a minimal API (REST/WS) that exposes the current device registry state for UI/mobile control.
6. **Extensibility:**  
   - Allow for community contributions by defining a standard configuration schema and clear interfaces for adding new device drivers.
